// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adaptspec
Rcpp::List adaptspec(unsigned int nLoop, unsigned int nWarmUp, Rcpp::NumericMatrix xR, Rcpp::List missingIndicesR, Rcpp::List priorList, Rcpp::List tuningList, Rcpp::List startR, Rcpp::List thin, bool showProgress, bool debug);
RcppExport SEXP _BayesSpec_adaptspec(SEXP nLoopSEXP, SEXP nWarmUpSEXP, SEXP xRSEXP, SEXP missingIndicesRSEXP, SEXP priorListSEXP, SEXP tuningListSEXP, SEXP startRSEXP, SEXP thinSEXP, SEXP showProgressSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nLoop(nLoopSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nWarmUp(nWarmUpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xR(xRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingIndicesR(missingIndicesRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tuningList(tuningListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type startR(startRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptspec(nLoop, nWarmUp, xR, missingIndicesR, priorList, tuningList, startR, thin, showProgress, debug));
    return rcpp_result_gen;
END_RCPP
}
// getSampleFilled
Rcpp::List getSampleFilled(Rcpp::NumericMatrix xR, Rcpp::List priorList, Rcpp::List stateList, Rcpp::List tuningList);
RcppExport SEXP _BayesSpec_getSampleFilled(SEXP xRSEXP, SEXP priorListSEXP, SEXP stateListSEXP, SEXP tuningListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xR(xRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type stateList(stateListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tuningList(tuningListSEXP);
    rcpp_result_gen = Rcpp::wrap(getSampleFilled(xR, priorList, stateList, tuningList));
    return rcpp_result_gen;
END_RCPP
}
// getMetropolisLogRatio
double getMetropolisLogRatio(Rcpp::List currentR, Rcpp::List proposalR, Rcpp::NumericMatrix xR, Rcpp::List priorList, Rcpp::List tuningList);
RcppExport SEXP _BayesSpec_getMetropolisLogRatio(SEXP currentRSEXP, SEXP proposalRSEXP, SEXP xRSEXP, SEXP priorListSEXP, SEXP tuningListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type currentR(currentRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type proposalR(proposalRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xR(xRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type priorList(priorListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tuningList(tuningListSEXP);
    rcpp_result_gen = Rcpp::wrap(getMetropolisLogRatio(currentR, proposalR, xR, priorList, tuningList));
    return rcpp_result_gen;
END_RCPP
}
// fftForwardR2C
Rcpp::ComplexVector fftForwardR2C(Rcpp::NumericVector inputR);
RcppExport SEXP _BayesSpec_fftForwardR2C(SEXP inputRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type inputR(inputRSEXP);
    rcpp_result_gen = Rcpp::wrap(fftForwardR2C(inputR));
    return rcpp_result_gen;
END_RCPP
}
// fftForwardC2C
Rcpp::ComplexVector fftForwardC2C(Rcpp::ComplexVector inputR);
RcppExport SEXP _BayesSpec_fftForwardC2C(SEXP inputRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::ComplexVector >::type inputR(inputRSEXP);
    rcpp_result_gen = Rcpp::wrap(fftForwardC2C(inputR));
    return rcpp_result_gen;
END_RCPP
}
// logisticStickBreakingMixture
Rcpp::List logisticStickBreakingMixture(unsigned int nLoop, unsigned int nWarmUp, Rcpp::NumericMatrix xR, Rcpp::List missingIndicesR, Rcpp::NumericMatrix designMatrixR, Rcpp::List priorsR, Rcpp::NumericMatrix priorMeanR, Rcpp::NumericMatrix priorPrecisionR, double tauPriorASquared, double tauPriorNu, double tauPriorUpper, Rcpp::List componentTuningR, Rcpp::List lsbpTuningR, bool firstCategoryFixed, unsigned int nSplineBases, Rcpp::List startR, Rcpp::List thin, bool showProgress, bool mpi);
RcppExport SEXP _BayesSpec_logisticStickBreakingMixture(SEXP nLoopSEXP, SEXP nWarmUpSEXP, SEXP xRSEXP, SEXP missingIndicesRSEXP, SEXP designMatrixRSEXP, SEXP priorsRSEXP, SEXP priorMeanRSEXP, SEXP priorPrecisionRSEXP, SEXP tauPriorASquaredSEXP, SEXP tauPriorNuSEXP, SEXP tauPriorUpperSEXP, SEXP componentTuningRSEXP, SEXP lsbpTuningRSEXP, SEXP firstCategoryFixedSEXP, SEXP nSplineBasesSEXP, SEXP startRSEXP, SEXP thinSEXP, SEXP showProgressSEXP, SEXP mpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nLoop(nLoopSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nWarmUp(nWarmUpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xR(xRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingIndicesR(missingIndicesRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type designMatrixR(designMatrixRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type priorsR(priorsRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type priorMeanR(priorMeanRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type priorPrecisionR(priorPrecisionRSEXP);
    Rcpp::traits::input_parameter< double >::type tauPriorASquared(tauPriorASquaredSEXP);
    Rcpp::traits::input_parameter< double >::type tauPriorNu(tauPriorNuSEXP);
    Rcpp::traits::input_parameter< double >::type tauPriorUpper(tauPriorUpperSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type componentTuningR(componentTuningRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lsbpTuningR(lsbpTuningRSEXP);
    Rcpp::traits::input_parameter< bool >::type firstCategoryFixed(firstCategoryFixedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nSplineBases(nSplineBasesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type startR(startRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    Rcpp::traits::input_parameter< bool >::type mpi(mpiSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticStickBreakingMixture(nLoop, nWarmUp, xR, missingIndicesR, designMatrixR, priorsR, priorMeanR, priorPrecisionR, tauPriorASquared, tauPriorNu, tauPriorUpper, componentTuningR, lsbpTuningR, firstCategoryFixed, nSplineBases, startR, thin, showProgress, mpi));
    return rcpp_result_gen;
END_RCPP
}
// splines_basis1d_demmler_reinsch
Rcpp::NumericMatrix splines_basis1d_demmler_reinsch(Rcpp::NumericVector xR, unsigned int nBases);
RcppExport SEXP _BayesSpec_splines_basis1d_demmler_reinsch(SEXP xRSEXP, SEXP nBasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xR(xRSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nBases(nBasesSEXP);
    rcpp_result_gen = Rcpp::wrap(splines_basis1d_demmler_reinsch(xR, nBases));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingMeanSamples
NumericMatrix timeVaryingMeanSamples(IntegerVector nSegments, IntegerMatrix cutPoints, NumericMatrix mu, IntegerVector times);
RcppExport SEXP _BayesSpec_timeVaryingMeanSamples(SEXP nSegmentsSEXP, SEXP cutPointsSEXP, SEXP muSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type nSegments(nSegmentsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type cutPoints(cutPointsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingMeanSamples(nSegments, cutPoints, mu, times));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingMeanMixtureMeanCategories
NumericMatrix timeVaryingMeanMixtureMeanCategories(NumericVector componentSamples, IntegerMatrix categories);
RcppExport SEXP _BayesSpec_timeVaryingMeanMixtureMeanCategories(SEXP componentSamplesSEXP, SEXP categoriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type categories(categoriesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingMeanMixtureMeanCategories(componentSamples, categories));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingMeanMixtureMeanProbabilities
NumericMatrix timeVaryingMeanMixtureMeanProbabilities(NumericVector componentSamples, NumericVector probabilities);
RcppExport SEXP _BayesSpec_timeVaryingMeanMixtureMeanProbabilities(SEXP componentSamplesSEXP, SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingMeanMixtureMeanProbabilities(componentSamples, probabilities));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingMeanMixtureSamplesProbabilities
NumericVector timeVaryingMeanMixtureSamplesProbabilities(NumericVector componentSamples, NumericVector probabilities);
RcppExport SEXP _BayesSpec_timeVaryingMeanMixtureSamplesProbabilities(SEXP componentSamplesSEXP, SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingMeanMixtureSamplesProbabilities(componentSamples, probabilities));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingSpectraSamples
NumericVector timeVaryingSpectraSamples(IntegerVector nSegments, IntegerMatrix cutPoints, NumericVector beta, NumericVector frequencies, IntegerVector times, std::string frequencyTransform);
RcppExport SEXP _BayesSpec_timeVaryingSpectraSamples(SEXP nSegmentsSEXP, SEXP cutPointsSEXP, SEXP betaSEXP, SEXP frequenciesSEXP, SEXP timesSEXP, SEXP frequencyTransformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type nSegments(nSegmentsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type cutPoints(cutPointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type frequencies(frequenciesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< std::string >::type frequencyTransform(frequencyTransformSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingSpectraSamples(nSegments, cutPoints, beta, frequencies, times, frequencyTransform));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingSpectraMixtureMeanCategories
NumericVector timeVaryingSpectraMixtureMeanCategories(NumericVector componentSamples, IntegerMatrix categories);
RcppExport SEXP _BayesSpec_timeVaryingSpectraMixtureMeanCategories(SEXP componentSamplesSEXP, SEXP categoriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type categories(categoriesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingSpectraMixtureMeanCategories(componentSamples, categories));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingSpectraMixtureMeanProbabilities
NumericVector timeVaryingSpectraMixtureMeanProbabilities(NumericVector componentSamples, NumericVector probabilities);
RcppExport SEXP _BayesSpec_timeVaryingSpectraMixtureMeanProbabilities(SEXP componentSamplesSEXP, SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingSpectraMixtureMeanProbabilities(componentSamples, probabilities));
    return rcpp_result_gen;
END_RCPP
}
// timeVaryingSpectraMixtureSamplesProbabilities
NumericVector timeVaryingSpectraMixtureSamplesProbabilities(NumericVector componentSamples, NumericVector probabilities);
RcppExport SEXP _BayesSpec_timeVaryingSpectraMixtureSamplesProbabilities(SEXP componentSamplesSEXP, SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type componentSamples(componentSamplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(timeVaryingSpectraMixtureSamplesProbabilities(componentSamples, probabilities));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesSpec_adaptspec", (DL_FUNC) &_BayesSpec_adaptspec, 10},
    {"_BayesSpec_getSampleFilled", (DL_FUNC) &_BayesSpec_getSampleFilled, 4},
    {"_BayesSpec_getMetropolisLogRatio", (DL_FUNC) &_BayesSpec_getMetropolisLogRatio, 5},
    {"_BayesSpec_fftForwardR2C", (DL_FUNC) &_BayesSpec_fftForwardR2C, 1},
    {"_BayesSpec_fftForwardC2C", (DL_FUNC) &_BayesSpec_fftForwardC2C, 1},
    {"_BayesSpec_logisticStickBreakingMixture", (DL_FUNC) &_BayesSpec_logisticStickBreakingMixture, 19},
    {"_BayesSpec_splines_basis1d_demmler_reinsch", (DL_FUNC) &_BayesSpec_splines_basis1d_demmler_reinsch, 2},
    {"_BayesSpec_timeVaryingMeanSamples", (DL_FUNC) &_BayesSpec_timeVaryingMeanSamples, 4},
    {"_BayesSpec_timeVaryingMeanMixtureMeanCategories", (DL_FUNC) &_BayesSpec_timeVaryingMeanMixtureMeanCategories, 2},
    {"_BayesSpec_timeVaryingMeanMixtureMeanProbabilities", (DL_FUNC) &_BayesSpec_timeVaryingMeanMixtureMeanProbabilities, 2},
    {"_BayesSpec_timeVaryingMeanMixtureSamplesProbabilities", (DL_FUNC) &_BayesSpec_timeVaryingMeanMixtureSamplesProbabilities, 2},
    {"_BayesSpec_timeVaryingSpectraSamples", (DL_FUNC) &_BayesSpec_timeVaryingSpectraSamples, 6},
    {"_BayesSpec_timeVaryingSpectraMixtureMeanCategories", (DL_FUNC) &_BayesSpec_timeVaryingSpectraMixtureMeanCategories, 2},
    {"_BayesSpec_timeVaryingSpectraMixtureMeanProbabilities", (DL_FUNC) &_BayesSpec_timeVaryingSpectraMixtureMeanProbabilities, 2},
    {"_BayesSpec_timeVaryingSpectraMixtureSamplesProbabilities", (DL_FUNC) &_BayesSpec_timeVaryingSpectraMixtureSamplesProbabilities, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesSpec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
